#!/usr/bin/env bash
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script allows creating a terraform plan for the GCP coordinator
# distributed PBS environment
# It is intended to be run locally within the deployment directory,
# adjacent to environments_mp_primary and environments_mp_secondary
#
# Args:
#   required:
#    --environment=<value> \ # The environment directory name
#    --coordinator=<value> \ # The coordinator name, use to complete 'environments_mp_' directory name
#    --release_version=<value> # The version of this release
#
#
# `./create_tfplan_distributedpbs.sh help` for usage instructions.

set -euo pipefail

function plan_pbs_base() {
    environment_dir=$1
    plan_version_suffix=$2

    terraform -chdir=$environment_dir/distributedpbs_base init -input=false
    terraform -chdir=$environment_dir/distributedpbs_base plan -input=false -out=tfplan.pbs_base_$plan_version_suffix
    terraform -chdir=$environment_dir/distributedpbs_base show -no-color tfplan.pbs_base_$plan_version_suffix > $environment_dir/distributedpbs_base/tfplan.pbs_base_$plan_version_suffix.txt

    pbs_service_account_email="$(terraform -chdir=$environment_dir/distributedpbs_base output -raw pbs_service_account_email)"
}

function plan_pbs_application() {
    environment_dir=$1
    image_version_tag=$2
    plan_version_suffix=$3

    generated_version_tf_vars_file=$environment_dir/distributedpbs_application/version.auto.tfvars

    # Delete the generated auto.tfvars containing the version file if it exists
    if [ -f "$generated_version_tf_vars_file" ]; then
        rm -f $generated_version_tf_vars_file
    fi

    # Create the auto.tfvars version file
    touch $generated_version_tf_vars_file
    echo "# This file is autogenerated in an automated deployment by create_tfplan_distributedpbs.sh" >> $generated_version_tf_vars_file
    echo "pbs_image_tag = \"$image_version_tag\"" >> $generated_version_tf_vars_file
    echo "pbs_service_account_email = \"$pbs_service_account_email\"" >> $generated_version_tf_vars_file


    terraform -chdir=$environment_dir/distributedpbs_application init -input=false
    terraform -chdir=$environment_dir/distributedpbs_application plan -input=false -out=tfplan.pbs_app_$plan_version_suffix
    terraform -chdir=$environment_dir/distributedpbs_application show -no-color tfplan.pbs_app_$plan_version_suffix > $environment_dir/distributedpbs_application/tfplan.pbs_app_$plan_version_suffix.txt
  }

function validate_input() {
  if [ ! -d "$environment_dir" ]; then
      echo "ERROR: Environment directory [$environment_dir] does not exist."
      exit 1
  fi
}

if [[ "$#" -lt 1 || $1 == "help" ]]; then
help_msg=$(cat <<-END
  \n
  To deploy a given environment provide the environment name, the coordinator name, the release version.\n
  Example:
  \n\n
  ./create_tfplan_distributedpbs.sh --environment=staging --coordinator=primary --release_version=v1
  \n\n
  Additionally the optional parameter --auto_approve=true can be provided to auto-approve terraform apply
  \n\n
  In the example above, the environment deployed would be:
  \n\n
  environments_mp_primary\n
  \t|__staging\n
  \t\t|__distributedpbs_base\n
  \t\t|__distributedpbs_application\n
  \n\n
  Where the following would occur:\n
  1. The terraform environment under distributedpbs_base would be deployed.\n
  2. The pbs container image under dist would be pushed to the \n
  \tcontainer registry belonging to this environment.\n
  3.The terraform environment under distributedpbs_application would be deployed.\n
END
)
  echo -e $help_msg
  exit 1
fi

if [ "$#" -lt 3 ]; then
error_msg=$(cat <<-END
  Must provide all required inputs:\n
    --environment=<value>\n
    --coordinator=<value>\n
    --release_version=<value>\n
END
)
  echo -e $error_msg
  exit 1
fi

auto_approve=false

while [ $# -gt 0 ]; do
  case "$1" in
    --environment=*)
      environment="${1#*=}"
      ;;
    --coordinator=*)
      coordinator="${1#*=}"
      ;;
    --release_version=*)
      release_version="${1#*=}"
      ;;
    *)
      printf "***************************\n"
      printf "* Error: Invalid argument.*\n"
      printf "***************************\n"
      exit 1
  esac
  shift
done

export TF_IN_AUTOMATION=1

environment_dir="./environments_mp_$coordinator/$environment"
plan_version_suffix="$environment"_"$coordinator"_"$release_version"
# Fail early if expected files do not exist
validate_input

# Create the tfplan for distributedpbs_base resources for this environment
plan_pbs_base "$environment_dir" "$plan_version_suffix"

current_timestamp=$(date +"%Y%m%d%H%M%S")
version_tag="pbs-$release_version-$current_timestamp"


# Create the tfplan for distributedpbs_application resources for this environment
plan_pbs_application "$environment_dir" "$version_tag" "$plan_version_suffix"
