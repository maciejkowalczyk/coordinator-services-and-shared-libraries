/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.scp.coordinator.keymanagement.keystorage.tasks.common;

import static com.google.scp.shared.util.KeysetHandleSerializerUtil.fromBinaryCiphertext;
import static java.nio.charset.StandardCharsets.UTF_8;

import com.google.crypto.tink.Aead;
import com.google.crypto.tink.aead.AeadConfig;
import com.google.protobuf.ByteString;
import com.google.scp.coordinator.protos.keymanagement.shared.backend.DataKeyProto.DataKey;
import com.google.scp.shared.crypto.tink.CloudAeadSelector;
import com.google.scp.shared.util.Base64Util;
import java.io.IOException;
import java.security.GeneralSecurityException;

/** Performs encrypt and decrypt operations using a {@link DataKey}. */
public final class DataKeyEncryptionUtil {

  static {
    try {
      AeadConfig.register();
    } catch (GeneralSecurityException e) {
      throw new RuntimeException("Error initializing tink.");
    }
  }

  private DataKeyEncryptionUtil() {}

  /**
   * Encrypts the provided ByteString {@code cleartext} with the encryption key contained in {@code
   * DataKey} and returns the result.
   *
   * <p>The returned value can only be decrypted if the recipient has the DataKey and permissions to
   * decrypt the DataKey. {@link #decryptWithDataKey} does the inverse operation.
   *
   * <p>The Aead provided by {@param aeadSelector} must have permissions to decrypt the data key or
   * this operation will fail.
   *
   * <p>The provided {@param publicKey} should be base64-encoded.
   *
   * @throws GeneralSecurityException if encryption fails. The message is safe to display in an
   *     error message.
   */
  public static ByteString encryptWithDataKey(
      CloudAeadSelector aeadSelector, DataKey dataKey, ByteString cleartext, String publicKey)
      throws GeneralSecurityException {
    var aead = extractAead(aeadSelector, dataKey);
    try {
      var ciphertext = aead.encrypt(cleartext.toByteArray(), publicKey.getBytes(UTF_8));

      return ByteString.copyFrom(ciphertext);
    } catch (GeneralSecurityException e) {
      throw new GeneralSecurityException("Failed to encrypt using data key", e);
    }
  }

  /**
   * Decrypts the provided ByteString {@code ciphertext} with the encryption key contained in {@code
   * DataKey} and returns the result.
   *
   * <p>If the decryption succeeds, the ciphertext will be known to have been generated by an entity
   * with the ability to decrypt the provided DataKey. If only trusted execution environments have
   * the ability to decrypt the DataKey, <b>the returned message will be known to have been
   * generated by a trusted execution environment</b>.
   *
   * <p>The AEAD provided by {@param aeadSelector} must have permissions to decrypt the data key or
   * this operation will fail.
   *
   * <p>The provided {@param publicKey} should be base64-encoded.
   *
   * @throws GeneralSecurityException if decryption fails. The message is safe to display in an
   *     error message.
   */
  public static ByteString decryptWithDataKey(
      CloudAeadSelector aeadSelector, DataKey dataKey, ByteString ciphertext, String publicKey)
      throws GeneralSecurityException {
    var aead = extractAead(aeadSelector, dataKey);
    try {
      var cleartext = aead.decrypt(ciphertext.toByteArray(), publicKey.getBytes(UTF_8));

      return ByteString.copyFrom(cleartext);
    } catch (GeneralSecurityException e) {
      throw new GeneralSecurityException("Failed to decrypt using data key", e);
    }
  }

  /** Decrypts and returns the encryption key contained within {@code dataKey}. */
  private static Aead extractAead(CloudAeadSelector aeadSelector, DataKey dataKey)
      throws GeneralSecurityException {
    try {
      var kekAead = aeadSelector.getAead(dataKey.getEncryptedDataKeyKekUri());

      var keysetHandle =
          fromBinaryCiphertext(Base64Util.fromBase64String(dataKey.getEncryptedDataKey()), kekAead);

      return keysetHandle.getPrimitive(Aead.class);
    } catch (IOException | GeneralSecurityException e) {
      throw new GeneralSecurityException("Failed to decrypt data key", e);
    }
  }
}
